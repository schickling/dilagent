import type { SummaryInput } from '../schemas/file-management.ts'

export const createSummaryPrompt = (input: SummaryInput): string => {
  const { runState, runConfig, timeline, reproductionResult, executionMetrics, artifactsPaths } = input

  return `Generate a comprehensive markdown summary report for this Dilagent debugging session.

## Run Information
- **Run ID**: ${runState.runId}
- **Problem Statement**: ${runConfig.problemStatement}
- **Context Directory**: ${runState.contextDir}
- **Started**: ${runState.createdAt}
- **Completed**: ${runState.lastUpdated}
- **Total Duration**: ${Math.round(executionMetrics.totalDurationMs / 1000)}s
- **LLM Used**: ${runConfig.llm}

## Reproduction Results
${
  runState.reproduction.status === 'success'
    ? `✅ **Successfully reproduced** (confidence: ${Math.round(runState.reproduction.confidence * 100)}%)
${runState.reproduction.attempts > 1 ? `- Required ${runState.reproduction.attempts} attempts` : ''}
${reproductionResult ? '- Detailed reproduction data available' : ''}
${artifactsPaths.reproScript ? `- Generated reproduction script: \`${artifactsPaths.reproScript}\`` : ''}`
    : `❌ **Failed to reproduce** after ${runState.reproduction.attempts} attempts
- Confidence: ${Math.round(runState.reproduction.confidence * 100)}%`
}

## Hypothesis Testing Results

**Summary**: ${runState.overallProgress.totalHypotheses} hypotheses tested
- ✅ ${runState.overallProgress.completed} completed
- ❌ ${runState.overallProgress.failed} failed
- ⏳ ${runState.overallProgress.remaining} remaining

### Hypothesis Details

${runState.hypotheses
  .map(
    (hyp) => `#### ${hyp.id}: ${hyp.slug.replace(/-/g, ' ')}
- **Status**: ${hyp.status}${hyp.result ? ` (${hyp.result})` : ''}
- **Branch**: \`${hyp.branch}\`
${hyp.confidence ? `- **Confidence**: ${Math.round(hyp.confidence * 100)}%` : ''}
${hyp.executionTimeMs ? `- **Execution Time**: ${Math.round(hyp.executionTimeMs / 1000)}s` : ''}
${hyp.startedAt && hyp.completedAt ? `- **Duration**: ${hyp.startedAt} → ${hyp.completedAt}` : ''}`,
  )
  .join('\n\n')}

${
  runConfig.parallelExecution.enabled
    ? `\n### Parallel Execution
- **Max Concurrent**: ${runConfig.parallelExecution.maxConcurrent}
- **Currently Running**: ${runState.parallelExecution.currentlyRunning.length > 0 ? runState.parallelExecution.currentlyRunning.join(', ') : 'None'}`
    : ''
}

## Key Timeline Events

${timeline.events
  .filter(
    (event) =>
      event.hypothesisId || event.phase || event.event.includes('completed') || event.event.includes('started'),
  )
  .slice(-10) // Show last 10 key events
  .map(
    (event) =>
      `- **${event.timestamp}**: ${event.event}${event.hypothesisId ? ` (${event.hypothesisId})` : ''}${event.phase ? ` [${event.phase}]` : ''}`,
  )
  .join('\n')}

## Performance Metrics

- **Total Execution**: ${Math.round(executionMetrics.totalDurationMs / 1000)}s
${executionMetrics.reproductionDurationMs ? `- **Reproduction Phase**: ${Math.round(executionMetrics.reproductionDurationMs / 1000)}s` : ''}
${executionMetrics.hypothesisGenerationDurationMs ? `- **Hypothesis Generation**: ${Math.round(executionMetrics.hypothesisGenerationDurationMs / 1000)}s` : ''}
${executionMetrics.hypothesesTestingDurationMs ? `- **Hypothesis Testing**: ${Math.round(executionMetrics.hypothesesTestingDurationMs / 1000)}s` : ''}

## Generated Artifacts

${artifactsPaths.reproScript ? `- 📄 **Reproduction Script**: \`${artifactsPaths.reproScript}\`` : ''}
${artifactsPaths.reproductionJson ? `- 📊 **Reproduction Data**: \`${artifactsPaths.reproductionJson}\`` : ''}
${artifactsPaths.hypothesesJson ? `- 🧪 **Hypotheses Data**: \`${artifactsPaths.hypothesesJson}\`` : ''}

## Next Steps

Based on the results from this debugging session, please provide:

1. **Root Cause Analysis**: What was definitively identified as the cause(s) of the issue?

2. **Recommended Actions**: What specific steps should be taken to resolve the problem?

3. **Prevention Strategies**: How can similar issues be avoided in the future?

4. **Remaining Investigations**: What questions remain unanswered and require further investigation?

---

*Generated by Dilagent v1.0 - Hypothesis-driven debugging for complex systems*`
}
